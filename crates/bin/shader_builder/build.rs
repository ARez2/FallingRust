use std::fmt::Write;
use wgsl_to_wgpu::{create_shader_module, WriteOptions};

const SHADER_PATH: &'static str = "..\\..\\lib\\shaders";
const SHADER_GEN_PATH: &'static str = "..\\..\\lib\\shaders\\gen";
const INCLUDE_INSTRUCTION: &'static str = "//!include";

fn main() {
    println!("cargo:rerun-if-changed={}", SHADER_PATH);
    for shader in std::fs::read_dir(SHADER_PATH).expect("Could not find ../../lib/shaders") {
        let path = shader.unwrap();
        // Skip any directories
        if let Ok(filetype) = path.file_type() {
            if filetype.is_dir() {
                continue;
            };
        };

        let filename = path.file_name();
        let filename = filename.to_str().unwrap().split(".").nth(0).unwrap();
        let mut wgsl_source = std::fs::read_to_string(path.path()).unwrap();
        
        let mut insert_idx = 0;
        let generated_shader_file_path = std::path::PathBuf::from(SHADER_GEN_PATH).join(format!("{}_gen.wgsl", filename));
        let mut did_include = false;
        // Process //!include statements
        for line in wgsl_source.clone().lines() {
            if line.starts_with(INCLUDE_INSTRUCTION) {
                for include in line.split_whitespace().skip(1) {
                    println!("Found include '{}'", include);
                    let includepath = std::path::PathBuf::from(SHADER_PATH).join(include);
                    let mut contents = std::fs::read_to_string(includepath.clone()).expect(format!("Could not read include '{}'", includepath.display()).as_str());
                    contents.push_str("\n");
                    wgsl_source.insert_str(insert_idx, &contents);
                    did_include = true;
                };
            };
            insert_idx += line.len();
        };
        if did_include {
            let _ = std::fs::write(generated_shader_file_path.clone(), wgsl_source.clone());
        };
    
        // Generate the Rust bindings and write to a file.
        let mut text = String::new();
        writeln!(&mut text, "// File automatically generated by build.rs.").unwrap();
        writeln!(&mut text, "// Changes made to this file will not be saved.").unwrap();
        let includepath = generated_shader_file_path;
        text += &create_shader_module(
            &wgsl_source,
            format!("..\\{}", includepath.display().to_string()).as_str(),
            WriteOptions {
                derive_bytemuck: true,
                ..Default::default()
            },
        )
        .unwrap();
    
        std::fs::write(format!("src/{}.rs", filename), text.as_bytes()).unwrap();
    }
}